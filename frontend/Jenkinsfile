pipeline {
  agent { label 'built-in' }

  environment {
    PROJECT_NAME = 'craftista'
    SERVICE_NAME = 'frontend'
    BRANCH = 'main'
    INGRESS_PORT = '3000'
    EGRESS_PORT = '3000'
    DOCKERHUB_CREDENTIALS_ID = 'minh-public-docker'
    DOCKER_NETWORK = 'craftista-net'
    REPLICAS = '2'
  }

  stages {

    stage('Sparse Clone Service') {
      steps {
        script {
          sh """
          rm -rf service-workdir
          mkdir service-workdir
          cd service-workdir
          git init
          git remote add origin https://github.com/bestfizzz/craftista.git
          git config core.sparseCheckout true
          echo ${SERVICE_NAME}/ >> .git/info/sparse-checkout
          git pull origin ${BRANCH}
          """
        }
      }
    }

    stage('List Cloned Content') {
      steps {
        sh """
        echo "Listing root folder:"
        ls -l
        echo "Listing service-workdir folder:"
        ls -l service-workdir
        echo "Listing ${SERVICE_NAME} folder inside service-workdir:"
        ls -l service-workdir/${SERVICE_NAME}
        """
      }
    }

    stage('Build Image') {
      steps {
        withCredentials([usernamePassword(credentialsId: DOCKERHUB_CREDENTIALS_ID,
                                          usernameVariable: 'DOCKER_USER',
                                          passwordVariable: 'DOCKER_PASS')]) {
          script {
            def IMAGE_BASE = "${DOCKER_USER}/${PROJECT_NAME}-${SERVICE_NAME}"
            env.IMAGE_TAG = "${IMAGE_BASE}:${env.BUILD_ID}"
            env.IMAGE_LATEST = "${IMAGE_BASE}:latest"

            echo "ðŸ”¨ Building Docker image: ${env.IMAGE_TAG}"
            sh """
            docker build -t ${env.IMAGE_TAG} service-workdir/${SERVICE_NAME}
            docker tag ${env.IMAGE_TAG} ${env.IMAGE_LATEST}
            """
          }
        }
      }
    }

    stage('Test') {
      steps {
        echo "ðŸ§ª Running tests for ${PROJECT_NAME}-${SERVICE_NAME}:${BUILD_ID}"
        sh "docker run --rm ${IMAGE_TAG} npm test || exit 1"
      }
    }


    // OLD DEPLOY ON DOCKER CODE
    // stage('Create Network') {
    //   steps {
    //     echo "ðŸ”§ Ensuring Docker network '${DOCKER_NETWORK}' exists"
    //     sh """
    //     docker network inspect ${DOCKER_NETWORK} >/dev/null 2>&1 || \
    //     docker network create ${DOCKER_NETWORK}
    //     """
    //   }
    // }
// 
// 
    // stage('Deploy Service') {
    //   steps {
    //     echo "ðŸ›‘ Stopping existing container if any"
    //     sh """
    //     docker stop ${SERVICE_NAME} || true
    //     docker rm ${SERVICE_NAME} || true
    //     """
    //     echo "ðŸš€ Deploying '${IMAGE_TAG}'"
    //     sh """
    //     docker run -d --name ${SERVICE_NAME} \
    //       --network ${DOCKER_NETWORK} \
    //       -p ${INGRESS_PORT}:${EGRESS_PORT} ${IMAGE_TAG}
    //     """
    //   }
    // }

    stage('Push Image to Docker Hub') {
      steps {
        withCredentials([usernamePassword(credentialsId: DOCKERHUB_CREDENTIALS_ID,
                                          usernameVariable: 'DOCKER_USER',
                                          passwordVariable: 'DOCKER_PASS')]) {
          sh """
          echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
          docker push ${IMAGE_TAG}
          docker push ${IMAGE_LATEST}
          """
        }
      }
    }

    stage('Deploy on Kubernetes') {
      agent { label 'k8s-kubectl-ci-agent' }
      steps {
        script {
          writeFile file: 'deployment.yaml', text: """\
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${SERVICE_NAME}
spec:
  replicas: ${REPLICAS.toInteger()}
  selector:
    matchLabels:
      app: ${SERVICE_NAME}
  template:
    metadata:
      labels:
        app: ${SERVICE_NAME}
    spec:
      containers:
      - name: ${SERVICE_NAME}
        image: ${IMAGE_TAG}
        ports:
        - containerPort: ${EGRESS_PORT}
---
apiVersion: v1
kind: Service
metadata:
  name: ${SERVICE_NAME}
spec:
  type: LoadBalancer
  selector:
    app: ${SERVICE_NAME}
  ports:
  - port: ${INGRESS_PORT}
    targetPort: ${EGRESS_PORT}
"""
          sh 'kubectl apply -f deployment.yaml && rm deployment.yaml'
        }
      }
    }
  }

  post {
    always {
      echo 'ðŸšª Logging out from Docker Hub'
      sh 'docker logout || true'
    }
  }
}
